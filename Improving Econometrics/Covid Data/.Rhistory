caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(results2))
results2
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(results1),
digits = 4,
caption = "Collinearity Statistics")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(results),
digits = 4,
caption = "Collinearity Statistics")
ols_vif_tol(model = results2)
View(df)
View(df1)
lm(data = covidData, formula = `Death Rate` ~ Nursing +
Elderly +
`% Wearing Mask` +
`Total Tests per 100k` +
`Has Strict Lockdown`)
summary(results2)
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results2),
digits = 4,
caption = "Collinearity Statistics")
# Code chunks will be omitted by defualt.
# Graphs will be included.
knitr::opts_chunk$set(echo = FALSE,
include = FALSE,
results = "show",
error = FALSE,
warning = FALSE,
message = FALSE)
if(!require(pacman)) install.packages("pacman")
# General Packages
pacman::p_load(dplyr, readr,
ggplot2, patchwork)
# Output Packages
pacman::p_load(knitr, modelsummary)
# Project-specific packages
pacman::p_load(corrplot, car, skedastic,
pastecs, QuantPsyc, olsrr,
perturb)
library(janitor)
# The csv file
covidData <- read_csv("COVID data.csv",
col_types = cols(state = col_character(),
"% Wearing Mask" = col_double(),
"Population Density (p/mi^2)" = col_double(),
"Total Tests per 100k" = col_double(),
"Has Strict Lockdown" = col_double(),
"Elderly" = col_double(),
"Nursing" =  col_double(),
"Death Rate" = col_double(),
"Urban.Density" = col_double()))
death <- stat.desc(covidData$`Death Rate`)[c(4:6, 8, 9, 13)]
mask <- stat.desc(covidData$`% Wearing Mask`)[c(4:6, 8, 9, 13)]
tests <- stat.desc(covidData$`Total Tests per 100k`)[c(4:6, 8, 9, 13)]
elderly <- stat.desc(covidData$Elderly)[c(4:6, 8, 9, 13)]
nursing <- stat.desc(covidData$Nursing)[c(4:6, 8, 9, 13)]
density <- stat.desc(covidData$`Population Density (p/mi^2)`)[c(4:6, 8, 9, 13)]
# Prints descriptive statistics
kable(t(data.frame(death, mask, tests, elderly, nursing, density)), caption = "Descriptive Statistics")
rm(death, mask, tests, elderly, nursing, density)
simple_mask <- lm(data = covidData, formula = `Death Rate` ~ `% Wearing Mask`)
simple_pop <- lm(data = covidData, formula = `Death Rate` ~ `Population Density (p/mi^2)`)
simple_test <- lm(data = covidData, formula = `Death Rate` ~ `Total Tests per 100k`)
simple_lockdown <- lm(data = covidData, formula = `Death Rate` ~ `Has Strict Lockdown`)
simple_elderly <- lm(data = covidData, formula = `Death Rate` ~ `Elderly`)
simple_nursing <- lm(data = covidData, formula = `Death Rate` ~ `Nursing`)
modelsummary(models = list(
"Mask" = simple_mask,
"Density" = simple_pop,
"Test" = simple_test,
"Lockdown" = simple_lockdown,
"Elderly" = simple_elderly,
"Nursing" = simple_nursing),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
# Removing old variables
rm(simple_mask, simple_pop, simple_test, simple_lockdown, simple_elderly, simple_nursing)
# This section of code plots all the different variables against one another.
noRestr <- covidData %>%
filter(`Has Strict Lockdown` == 0)
restr <- covidData %>%
filter(`Has Strict Lockdown` == 1)
noRestr <- ggplot(data = noRestr) +
geom_boxplot(mapping = aes(`Death Rate`)) +
xlab("Death Rate (no strict lockdown)")
restr <- ggplot(data = restr) +
geom_boxplot(mapping = aes(`Death Rate`)) +
xlab("Death Rate (strict lockdown)") +
xlim(c(0, 8))
# plotting everything against the death rate
qplot(covidData$Nursing, covidData$`Death Rate`, xlab = "Nursing", ylab = "Death Rate") +
qplot(covidData$`Total Tests per 100k`, covidData$`Death Rate`, xlab = "Tests", ylab = "Death Rate") +
qplot(covidData$Elderly, covidData$`Death Rate`, xlab = "Elderly", ylab = "Death Rate") +
qplot(covidData$`% Wearing Mask`, covidData$`Death Rate`, xlab = "Mask", ylab = "Death Rate") +
qplot(covidData$`Population Density (p/mi^2)`, covidData$`Death Rate`, xlab = "Density (Excluding DC)", ylab = "Death Rate", xlim = c(0, 1500)) /
qplot(covidData$`Population Density (p/mi^2)`, covidData$`Death Rate`, xlab = "Density (Including DC)", ylab = "Death Rate") +
restr / noRestr + plot_annotation(title = "Explanatory Variables vs. Dependent Variable (New Deaths from COVID)")
# Removing old variables
rm(noRestr, restr)
results <- lm(data = covidData, `Death Rate` ~ Nursing +
Elderly + `% Wearing Mask` +
`Population Density (p/mi^2)`+
`Total Tests per 100k` +
`Has Strict Lockdown`)
modelsummary(models = list(results),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
notes = "Predictors: Percent Wearing Masks, State Population Density, Total COVID Tests Per 100k, Percent of Population over 65, Nursing Home Residents Per 100k Adults",
output = "markdown")
# The correlation coefficients
correlation <- as.data.frame(cor(covidData[,c(-1 ,-5, -8, -9)]))
# Renaming the variables the way they are in my official model in the document
colnames(correlation) <- c("Mask", "Density", "Tests", "Elderly", "Nursing")
rownames(correlation) <- c("Mask", "Density", "Tests", "Elderly", "Nursing")
# Visualizing correlation between the variables (corrplot takes a matrix as input, I think)
corrplot(corr = as.matrix(correlation),
title = "Correlation Matrix",
method = "pie",
type = "upper",
tl.srt = 0,
outline = "black",
tl.pos = "d",
tl.col = "black",
tl.cex = 1.5,
cl.cex = 1.5,
diag = T)
# The numeric output
datasummary_correlation(correlation,
title = "Zero-Order Correlation Coefficients",
output = "markdown")
# linear model of masks against density
pop_mask <- lm(data = covidData, formula = `Population Density (p/mi^2)` ~ `% Wearing Mask`)
# linear model of masks against nursing
nurse_mask <- lm(data = covidData, formula = Nursing ~ `% Wearing Mask`)
# linear model of density against tests
test_density <- lm(data = covidData, formula = `Total Tests per 100k` ~ `Population Density (p/mi^2)`)
modelsummary(models = list("Population vs Masks" = pop_mask,
"Nursing vs Masks" = nurse_mask,
"Tests vs Masks" = test_density),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
# Removing old variables
rm(pop_mask, nurse_mask, test_density)
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results),
digits = 4,
caption = "Collinearity Statistics")
### After removing the population density variable
results2 <- lm(data = covidData, formula = `Death Rate` ~ Nursing +
Elderly +
`% Wearing Mask` +
`Total Tests per 100k` +
`Has Strict Lockdown`)
# The model summary
modelsummary(models = list("After Removing Density" = results2),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results2)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
summary(results2)
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results2),
digits = 4,
caption = "Collinearity Statistics")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = `results2`),
digits = 4,
caption = "Collinearity Statistics")
### After removing the population density variable
results2 <- lm(data = covidData, formula = `Death Rate` ~ Nursing +
Elderly +
`% Wearing Mask` +
`Total Tests per 100k` +
`Has Strict Lockdown`)
# The model summary
modelsummary(models = list("After Removing Density" = results2),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results2)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
summary(results2)
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = `results2`),
digits = 4,
caption = "Collinearity Statistics")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = "results2"),
digits = 4,
caption = "Collinearity Statistics")
### After removing the population density variable
resultss <- lm(data = covidData, formula = `Death Rate` ~ Nursing +
Elderly +
`% Wearing Mask` +
`Total Tests per 100k` +
`Has Strict Lockdown`)
# The model summary
modelsummary(models = list("After Removing Density" = results2),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results2)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
summary(results2)
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = resultss),
digits = 4,
caption = "Collinearity Statistics")
ols_vif_tol(model = results2)
### After removing the population density variable
results2 <- lm(data = covidData, formula = `Death Rate` ~ Nursing +
Elderly +
`% Wearing Mask` +
`Total Tests per 100k` +
`Has Strict Lockdown`)
# The model summary
modelsummary(models = list("After Removing Density" = results2),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results2)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results2),
digits = 4,
caption = "Collinearity Statistics")
rm(correlation, resultss)
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results2),
digits = 4,
caption = "Collinearity Statistics")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results),
digits = 4,
caption = "Collinearity Statistics")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results),
digits = 4,
caption = "Collinearity Statistics")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results),
digits = 4,
caption = "Collinearity Statistics")
??str2lang
library(backports)
### After removing the population density variable
results2 <- lm(data = covidData, formula = `Death Rate` ~ Nursing +
Elderly +
`% Wearing Mask` +
`Total Tests per 100k` +
`Has Strict Lockdown`)
# The model summary
modelsummary(models = list("After Removing Density" = results2),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results2)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results),
digits = 4,
caption = "Collinearity Statistics")
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results),
digits = 4,
caption = "Collinearity Statistics")
install.packages("olsrr")
install.packages("olsrr")
library(olsrr)
# Code chunks will be omitted by defualt.
# Graphs will be included.
knitr::opts_chunk$set(echo = FALSE,
include = FALSE,
results = "show",
error = FALSE,
warning = FALSE,
message = FALSE)
### After removing the population density variable
results2 <- lm(data = covidData, formula = `Death Rate` ~ Nursing +
Elderly +
`% Wearing Mask` +
`Total Tests per 100k` +
`Has Strict Lockdown`)
# The model summary
modelsummary(models = list("After Removing Density" = results2),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
if(!require(pacman)) install.packages("pacman")
# General Packages
pacman::p_load(dplyr, readr,
ggplot2, patchwork)
# Output Packages
pacman::p_load(knitr, modelsummary)
# Project-specific packages
pacman::p_load(corrplot, car, skedastic,
pastecs, QuantPsyc, olsrr,
perturb)
library(backports)
# The csv file
covidData <- read_csv("COVID data.csv",
col_types = cols(state = col_character(),
"% Wearing Mask" = col_double(),
"Population Density (p/mi^2)" = col_double(),
"Total Tests per 100k" = col_double(),
"Has Strict Lockdown" = col_double(),
"Elderly" = col_double(),
"Nursing" =  col_double(),
"Death Rate" = col_double(),
"Urban.Density" = col_double()))
### After removing the population density variable
results2 <- lm(data = covidData, formula = `Death Rate` ~ Nursing +
Elderly +
`% Wearing Mask` +
`Total Tests per 100k` +
`Has Strict Lockdown`)
# The model summary
modelsummary(models = list("After Removing Density" = results2),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results2)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results),
digits = 4,
caption = "Collinearity Statistics")
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results),
digits = 4,
caption = "Collinearity Statistics")
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(results),
digits = 4,
caption = "Collinearity Statistics")
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results),
digits = 4,
caption = "Collinearity Statistics")
ols_vif_tol(model = results)
results
# The VIF and Tolerance collinearity statistics
print(olsrr::ols_vif_tol(model = results), digits = 4)
print(olsrr::ols_vif_tol(model = lm(mtcars, mtcars$mpg ~ mtcars$cyl)), digits = 4)
lm(mtcars, mtcars$mpg ~ mtcars$cyl)
print(olsrr::ols_vif_tol(model = lm(mtcars, formula = mtcars$mpg ~ mtcars$cyl)), digits = 4)
print(olsrr::ols_vif_tol(model = lm(formula = mtcars$mpg ~ mtcars$cyl)), digits = 4)
lm(formula = mtcars$mpg ~ mtcars$cyl)
remove.packages("olsrr")
install.packages("olsrr")
install.packages("olsrr")
# Code chunks will be omitted by defualt.
# Graphs will be included.
knitr::opts_chunk$set(echo = FALSE,
include = FALSE,
results = "show",
error = FALSE,
warning = FALSE,
message = FALSE)
if(!require(pacman)) install.packages("pacman")
# General Packages
pacman::p_load(dplyr, readr,
ggplot2, patchwork)
# Output Packages
pacman::p_load(knitr, modelsummary)
# Project-specific packages
pacman::p_load(corrplot, car, skedastic,
pastecs, QuantPsyc, olsrr,
perturb)
library(backports)
# The csv file
covidData <- read_csv("COVID data.csv",
col_types = cols(state = col_character(),
"% Wearing Mask" = col_double(),
"Population Density (p/mi^2)" = col_double(),
"Total Tests per 100k" = col_double(),
"Has Strict Lockdown" = col_double(),
"Elderly" = col_double(),
"Nursing" =  col_double(),
"Death Rate" = col_double(),
"Urban.Density" = col_double()))
death <- stat.desc(covidData$`Death Rate`)[c(4:6, 8, 9, 13)]
mask <- stat.desc(covidData$`% Wearing Mask`)[c(4:6, 8, 9, 13)]
tests <- stat.desc(covidData$`Total Tests per 100k`)[c(4:6, 8, 9, 13)]
elderly <- stat.desc(covidData$Elderly)[c(4:6, 8, 9, 13)]
nursing <- stat.desc(covidData$Nursing)[c(4:6, 8, 9, 13)]
density <- stat.desc(covidData$`Population Density (p/mi^2)`)[c(4:6, 8, 9, 13)]
# Prints descriptive statistics
kable(t(data.frame(death, mask, tests, elderly, nursing, density)), caption = "Descriptive Statistics")
rm(death, mask, tests, elderly, nursing, density)
simple_mask <- lm(data = covidData, formula = `Death Rate` ~ `% Wearing Mask`)
simple_pop <- lm(data = covidData, formula = `Death Rate` ~ `Population Density (p/mi^2)`)
simple_test <- lm(data = covidData, formula = `Death Rate` ~ `Total Tests per 100k`)
simple_lockdown <- lm(data = covidData, formula = `Death Rate` ~ `Has Strict Lockdown`)
simple_elderly <- lm(data = covidData, formula = `Death Rate` ~ `Elderly`)
simple_nursing <- lm(data = covidData, formula = `Death Rate` ~ `Nursing`)
modelsummary(models = list(
"Mask" = simple_mask,
"Density" = simple_pop,
"Test" = simple_test,
"Lockdown" = simple_lockdown,
"Elderly" = simple_elderly,
"Nursing" = simple_nursing),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
# Removing old variables
rm(simple_mask, simple_pop, simple_test, simple_lockdown, simple_elderly, simple_nursing)
# This section of code plots all the different variables against one another.
noRestr <- covidData %>%
filter(`Has Strict Lockdown` == 0)
restr <- covidData %>%
filter(`Has Strict Lockdown` == 1)
noRestr <- ggplot(data = noRestr) +
geom_boxplot(mapping = aes(`Death Rate`)) +
xlab("Death Rate (no strict lockdown)")
restr <- ggplot(data = restr) +
geom_boxplot(mapping = aes(`Death Rate`)) +
xlab("Death Rate (strict lockdown)") +
xlim(c(0, 8))
# plotting everything against the death rate
qplot(covidData$Nursing, covidData$`Death Rate`, xlab = "Nursing", ylab = "Death Rate") +
qplot(covidData$`Total Tests per 100k`, covidData$`Death Rate`, xlab = "Tests", ylab = "Death Rate") +
qplot(covidData$Elderly, covidData$`Death Rate`, xlab = "Elderly", ylab = "Death Rate") +
qplot(covidData$`% Wearing Mask`, covidData$`Death Rate`, xlab = "Mask", ylab = "Death Rate") +
qplot(covidData$`Population Density (p/mi^2)`, covidData$`Death Rate`, xlab = "Density (Excluding DC)", ylab = "Death Rate", xlim = c(0, 1500)) /
qplot(covidData$`Population Density (p/mi^2)`, covidData$`Death Rate`, xlab = "Density (Including DC)", ylab = "Death Rate") +
restr / noRestr + plot_annotation(title = "Explanatory Variables vs. Dependent Variable (New Deaths from COVID)")
# Removing old variables
rm(noRestr, restr)
results <- lm(data = covidData, `Death Rate` ~ Nursing +
Elderly + `% Wearing Mask` +
`Population Density (p/mi^2)`+
`Total Tests per 100k` +
`Has Strict Lockdown`)
modelsummary(models = list(results),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
notes = "Predictors: Percent Wearing Masks, State Population Density, Total COVID Tests Per 100k, Percent of Population over 65, Nursing Home Residents Per 100k Adults",
output = "markdown")
# The correlation coefficients
correlation <- as.data.frame(cor(covidData[,c(-1 ,-5, -8, -9)]))
# Renaming the variables the way they are in my official model in the document
colnames(correlation) <- c("Mask", "Density", "Tests", "Elderly", "Nursing")
rownames(correlation) <- c("Mask", "Density", "Tests", "Elderly", "Nursing")
# Visualizing correlation between the variables (corrplot takes a matrix as input, I think)
corrplot(corr = as.matrix(correlation),
title = "Correlation Matrix",
method = "pie",
type = "upper",
tl.srt = 0,
outline = "black",
tl.pos = "d",
tl.col = "black",
tl.cex = 1.5,
cl.cex = 1.5,
diag = T)
# The numeric output
datasummary_correlation(correlation,
title = "Zero-Order Correlation Coefficients",
output = "markdown")
# Removing old variables
rm(correlation)
# linear model of masks against density
pop_mask <- lm(data = covidData, formula = `Population Density (p/mi^2)` ~ `% Wearing Mask`)
# linear model of masks against nursing
nurse_mask <- lm(data = covidData, formula = Nursing ~ `% Wearing Mask`)
# linear model of density against tests
test_density <- lm(data = covidData, formula = `Total Tests per 100k` ~ `Population Density (p/mi^2)`)
modelsummary(models = list("Population vs Masks" = pop_mask,
"Nursing vs Masks" = nurse_mask,
"Tests vs Masks" = test_density),
statistic = c("p.value", "conf.int", "std.error", "statistic"),
output = "markdown")
# Removing old variables
rm(pop_mask, nurse_mask, test_density)
# The variance proportion table (also provides eigenvalues in column 1)
kable(olsrr::ols_eigen_cindex(results)[, -c(1, 3, 9)],
digits = 3,
caption = "Collinearity Diagnostics: Variance Proporitons (Dependent Variable: Death)")
results
# The VIF and Tolerance collinearity statistics
kable(olsrr::ols_vif_tol(model = results),
digits = 4,
caption = "Collinearity Statistics")
