ylab("Death") +
ggtitle("Scatterplot\n\nDependent Variable: Death\n") +
theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_point(mapping = aes(y = deathLN,x = Normalize(residuals.lm(results7)))) +
geom_smooth(method = "lm", se = F) +
xlab("Regression Standardized Predicted Values") +
ylab("Death") +
ggtitle("Scatterplot\n\nDependent Variable: Death\n") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(aes(y = deathLN,x = Normalize(residuals.lm(results7))) +
geom_point()) +
geom_smooth(method = "lm", se = F) +
xlab("Regression Standardized Predicted Values") +
ylab("Death") +
ggtitle("Scatterplot\n\nDependent Variable: Death\n") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(mapping = aes(y = deathLN,x = Normalize(residuals.lm(results7))) +
ggplot(mapping = aes(y = deathLN,x = Normalize(residuals.lm(results7)))) +
geom_point() +
geom_smooth(method = "lm", se = F) +
xlab("Regression Standardized Predicted Values") +
ylab("Death") +
ggtitle("Scatterplot\n\nDependent Variable: Death\n") +
theme(plot.title = element_text(hjust = 0.5))
plot(results7)
# The Glejser tests for heteroscedasticity
glejser(results7)
# Plotting the error terms against the variables
## The dependent variable
yplot <- ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
theme_classic()
plot(results7)
# Plotting the error terms against the variables
## The dependent variable
yplot <- ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
theme_classic()
yplot
# Storing the error terms in a variable
error <- residuals.lm(results7)
# Plotting Pearson residuals
residualPlots(error)
# Plotting Pearson residuals
residualPlots(results7)
# Squaring the error terms
errorsq <- error^2
# Thank goodness, the data looks like it has homoscedasticity!!!
ggplot(mapping = aes(y = deathLN,x = Normalize(residuals.lm(results7)))) +
geom_point() +
geom_smooth(method = "lm", se = F) +
xlab("Regression Standardized Predicted Values") +
ylab("Death") +
ggtitle("Scatterplot\n\nDependent Variable: Death\n") +
theme(plot.title = element_text(hjust = 0.5))
plot(results7)
# Plotting the error terms against the variables
## The dependent variable
yplot <- ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
theme_classic()
yplot
## The numeric explanatory variables
x1plot <- ggplot(covidData) +
geom_point(mapping = aes(x = `% Wearing Mask`, y = errorsq)) +
theme_classic()
x2plot <- ggplot(covidData) +
geom_point(mapping = aes(x = `Population Density (p/mi^2)`, y = errorsq)) +
theme_classic()
x3plot <- ggplot(covidData) +
geom_point(mapping = aes(x = `Total Tests per 100k`, y = errorsq)) +
theme_classic()
x4plot <- ggplot(covidData) +
geom_point(mapping = aes(x = `Elderly`, y = errorsq)) +
theme_classic()
x5plot <- ggplot(covidData) +
geom_point(mapping = aes(x = `Nursing`, y = errorsq)) +
theme_classic()
# Displaying the plots
yplot + x1plot + x2plot + x3plot + x4plot + x5plot
?glejser
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
xlab("Death") +
ylab("Residual Squared") +
ggtitle("Examining for Heteroscedasticity") +
theme_classic()
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
xlab("Death") +
ylab("Residual Squared") +
ggtitle("Examining for Heteroscedasticity")
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
xlab("Death") +
ylab("Residual Squared") +
ggtitle("Examining for Heteroscedasticity") +
theme(plot.title = element_text(hjust = 0.5))
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.2)
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.25)
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.225)
geom_hline(yintercept = -0.1
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.1)
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.01)
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = 0)
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.01)
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.01)
xlab("Death") +
ylab("Residual Squared") +
ggtitle("Examining for Heteroscedasticity") +
theme(plot.title = element_text(hjust = 0.5))
# Plotting the error terms against the variables
## The dependent variable
ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.01) +
xlab("Death") +
ylab("Residual Squared") +
ggtitle("Examining for Heteroscedasticity") +
theme(plot.title = element_text(hjust = 0.5))
predict.lm(results7)
ggplot() +
geom_point(mapping = aes(x = predict.lm(results7), y = errorsq)) +
xlab("Predicted Value (Xi)") +
ylab("Residual Squared") +
ggtitle("Examining for Heteroscedasticity") +
theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_point(mapping = aes(x = predict.lm(results7), y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.01) +
xlab("Predicted Value (Xi)") +
ylab("Residual Squared") +
ggtitle("Examining for Heteroscedasticity") +
theme(plot.title = element_text(hjust = 0.5))
# Plotting the error terms against the
# dependent variable
heteroDep <- ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.01) +
xlab("Death") +
ylab("Residual Squared") +
ggtitle("Examining for Heteroscedasticity") +
theme(plot.title = element_text(hjust = 0.5))
# Plotting the error terms against the
# predicted values
heteroIndep <- ggplot() +
geom_point(mapping = aes(x = predict.lm(results7), y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.01) +
xlab("Predicted Value (Xi)") +
ylab("Residual Squared") +
ggtitle("Examining for Heteroscedasticity") +
theme(plot.title = element_text(hjust = 0.5))
heteroDep / heteroIndep
# Plotting the error terms against the
# predicted values
heteroIndep <- ggplot() +
geom_point(mapping = aes(x = predict.lm(results7), y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.01) +
xlab("Predicted Value (Xi)") +
ylab("Residual Squared")
heteroDep / heteroIndep
# The Glejser tests for heteroscedasticity
skedastic::glejser(results7)
# The Glejser tests for heteroscedasticity
summary(skedastic::glejser(results7))
# The Glejser tests for heteroscedasticity
skedastic::glejser(results7)
# The Glejser tests for heteroscedasticity
glejser(results7)
results7
# One of the Glejser tests, done "manually" because
# I need the regression statistics
summary(lm(absErrorsq ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown))
# Stores the absolute value of the error term
error <- abs(error)
# The absolute value of the error squared
absErrorsq <- error^2
# The Glejser tests for heteroscedasticity (not used in the paper)
skedastic::glejser(results7)
# One of the Glejser tests, done "manually" because
# I need the regression statistics
summary(lm(absErrorsq ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown))
# One of the Glejser tests, done "manually" because
# I need the regression statistics
summary(lm(absErrorsq ~ nursing +
tests +
mask +
urban$Urban.Density))
plot(results7)
# One of the Glejser tests, done "manually" because
# I need the regression statistics
summary(lm(absErrorsq ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown))
df <- mutate(covidData, urban$Urban.Density)
df1 %>%
filter(lockdown == 0)
df %>%
filter(lockdown == 0)
df <- mutate(covidData, "Urban" = urban$Urban.Density)
df %>%
filter(lockdown == 0)
df0 <- df %>%
filter(lockdown == 0)
df1 <- df %>%
filter(lockdown == 0)
df1 <- df %>%
filter(lockdown == 1)
df1
# One of the Glejser tests, done "manually" because
# I need the regression statistics
glej <- summary(lm(absErrorsq ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown))
lm.beta(glej)
# One of the Glejser tests, done "manually" because
# I need the regression statistics
glej <- summary(lm(absErrorsq ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown))
lm.beta(glej)
# One of the Glejser tests, done "manually" because
# I need the regression statistics
glej <- lm(absErrorsq ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown)
summary(glej)
lm.beta(glej)
# One of the Glejser tests, done "manually" because
# I need the regression statistics
glej <- lm(error ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown)
summary(glej)
lm.beta(glej1)
# One of the Glejser tests, done "manually" because
# I need the regression statistics
glej1 <- lm(absError ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown)
summary(glej1)
lm.beta(glej1)
glej1 <- lm(absError ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown)
summary(glej1)
# Storing the error terms in a variable
error <- residuals.lm(results7)
# Plotting Pearson residuals
residualPlots(results7)
# Squaring the error terms
errorsq <- error^2
# Thank goodness, the data looks like it has homoscedasticity!!!
ggplot(mapping = aes(y = deathLN,x = Normalize(residuals.lm(results7)))) +
geom_point() +
geom_smooth(method = "lm", se = F) +
xlab("Regression Standardized Predicted Values") +
ylab("Death") +
ggtitle("Scatterplot\n\nDependent Variable: Death\n") +
theme(plot.title = element_text(hjust = 0.5))
# Plotting the error terms against the
# dependent variable
heteroDep <- ggplot() +
geom_point(mapping = aes(x = deathLN, y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.01) +
xlab("Death") +
ylab("Residual Squared") +
ggtitle("Examining for Heteroscedasticity") +
theme(plot.title = element_text(hjust = 0.5))
# Plotting the error terms against the
# predicted values
heteroIndep <- ggplot() +
geom_point(mapping = aes(x = predict.lm(results7), y = errorsq)) +
geom_hline(yintercept = 0.225) +
geom_hline(yintercept = -0.01) +
xlab("Predicted Value (Xi)") +
ylab("Residual Squared")
heteroDep / heteroIndep
# Running linear regressions against the absolute value of the error terms
# Stores the absolute value of the error term
absError <- abs(error)
# The absolute value of the error squared
absErrorsq <- error^2
# The Glejser tests for heteroscedasticity (not used in the paper)
skedastic::glejser(results7)
## Since the p-value is not significant, we FAIL to reject the null hypothesis (which states there is no
## heteroscedasticity), and conclude there is NO heteroscedasticity in the data...
# One of the Glejser tests, done "manually" because
# I need the regression statistics
glej1 <- lm(absError ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown)
summary(glej1)
lm.beta(glej1)
sqrt(.124)
# Another Gljser test
glej2 <- lm(absErrorsq ~ nursing +
tests +
mask +
urban$Urban.Density +
lockdown)
summary(glej2)
lm.beta(glej2)
sqrt(.1674)
# A variable transformation
tests_inv <- 1 / tests
deathLN_divTest <- deathLN / tests
nursing_divTest <- nursing / tests
mask_divTest <- mask / tests
urban_divTest <- urban$Urban.Density / tests_inv
results8 <- lm(deathLN_divTest ~ nursing_divTest +
tests_inv +
mask_divTest +
urban_divTest +
lockdown)
summary(results8)
lm.beta(results8)
# Storing the error terms in a variable
residualsTrasformed <- residuals.lm(results8)
# Storing the error terms in a variable
residualsTransformed <- residuals.lm(results8)
absResidualsTransformed <- abs(residualsTransformed)
# Storing the error terms in a variable
residualsTransformed <- residuals.lm(results8)
absResidualsTransformed <- abs(residualsTransformed)
residualsTransformedsq <- residualsTransformed^2
glej3 <- lm(absResidualsTransformed ~ nursing_divTest +
tests_inv +
mask_divTest +
urban_divTest +
lockdown)
summary(glej3)
lm.beta(glej3)
glej4 <- lm(absResidualsTransformed ~ nursing_divTest +
tests_inv +
mask_divTest +
urban_divTest +
lockdown))
summary(glej4)
glej4 <- lm(absResidualsTransformed ~ nursing_divTest +
tests_inv +
mask_divTest +
urban_divTest +
lockdown)
summary(glej4)
lm.beta(glej4)
summary(results8)
summary(results8)
summary(results8)
lm.beta(results8)
sqrt(.579)
glej3 <- lm(absResidualsTransformed ~ nursing_divTest +
tests_inv +
mask_divTest +
urban_divTest +
lockdown)
summary(glej3)
lm.beta(glej3)
glej4 <- lm(absResidualsTransformed ~ nursing_divTest +
tests_inv +
mask_divTest +
urban_divTest +
lockdown)
summary(glej4)
lm.beta(glej4)
sqrt(.1256)
results7
summary(results7)
summary(results8)
.579 - .4497
# Testing the model for autocorrelation using the Durbin-Watson test
durbinWatsonTest(results8)
# The model in code:
results <- lm(data = covidData, `Death Rate` ~ Nursing +
Elderly + `% Wearing Mask` +
`Population Density (p/mi^2)`+
`Total Tests per 100k` +
`Has Strict Lockdown`)
print(summary(results), digits = 10)
options(scipen = 999)
print(summary(results), digits = 10)
print(summary(results), digits = 4)
print(summary(results), digits = 3)
print(summary(results), digits = 3)
# This gives us the standardized coefficients
QuantPsyc::lm.beta(results)
# Again, but with quadratic variables
summary(lm(data = covidData, formula = `Death Rate` ~ masksq)) # The linear model for masks
cat("\n\n\n\n\n\n\n\n")
summary(lm(data = covidData, formula = `Death Rate` ~ densitysq)) # The linear model for population density
cat("\n\n\n\n\n\n\n\n")
summary(lm(data = covidData, formula = `Death Rate` ~ testssq))
cat("\n\n\n\n\n\n\n\n")
summary(lm(data = covidData, formula = `Death Rate` ~ `Has Strict Lockdown`))
cat("\n\n\n\n\n\n\n\n")
summary(lm(data = covidData, formula = `Death Rate` ~ elderlysq))
cat("\n\n\n\n\n\n\n\n")
summary(lm(data = covidData, formula = `Death Rate` ~ nursingsq))
summary(lm(data = covidData, formula = `Death Rate` ~ `% Wearing Mask`)) # The linear model for masks
cat("\n\n\n\n\n\n\n\n")
summary(lm(data = covidData, formula = `Death Rate` ~ `Population Density (p/mi^2)`)) # The linear model for population density
cat("\n\n\n\n\n\n\n\n")
summary(lm(data = covidData, formula = `Death Rate` ~ `Total Tests per 100k`))
cat("\n\n\n\n\n\n\n\n")
summary(lm(data = covidData, formula = `Death Rate` ~ `Has Strict Lockdown`))
cat("\n\n\n\n\n\n\n\n")
summary(lm(data = covidData, formula = `Death Rate` ~ `Elderly`))
cat("\n\n\n\n\n\n\n\n")
summary(lm(data = covidData, formula = `Death Rate` ~ `Nursing`))
summary(glej3)
# Changing the options to remove scientific notation
options(scipen = 999)
summary(glej3)
summary(glej4)
glej4 <- lm(residualsTransformedsq ~ nursing_divTest +
tests_inv +
mask_divTest +
urban_divTest +
lockdown)
summary(glej4)
glej4 <- lm(residualsTransformedsq ~ nursing_divTest +
tests_inv +
mask_divTest +
urban_divTest +
lockdown)
summary(glej4)
summary(glej3)
View(covidData)
View(covidData)
readr::write_csv(covidData, "COVID data.csv", col_names = TRUE, append = FALSE)
View(covidData)
View(c)
View(c)
View(urban)
library(dplyr)
left_join(covidData, urban, by = "State")
covidData <- left_join(covidData, urban, by = "State")
readr::write_csv(covidData, file = "COVID data.csv", append = FALSE, col_names = TRUE)
View(urban)
View(results5)
